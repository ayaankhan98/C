name: Awesome CI Workflow

on: [push, pull_request]
#   push:
#     branches: [ master ]
#   pull_request:
#     branches: [ master ]

jobs:
  MainSequence:
    name: Code Formatter
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1 # v2 is broken for git diff
      - uses: actions/setup-python@v2
      - name: requirements
        run: | 
          sudo apt -qq -y update
          sudo apt -qq install clang-format 
      - name: Setup Git Specs
        run: |
          git config --global user.name github-actions
          git config --global user.email '${GITHUB_ACTOR}@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY
      - name: Filename Formatter
        run: |
          IFS=$'\n'
          for fname in `find . -type f -name '*.c' -o -name '*.h'`
          do 
            echo "${fname}"
            new_fname=`echo ${fname} | tr ' ' '_'`
            echo "      ${new_fname}"
            new_fname=`echo ${new_fname} | tr 'A-Z' 'a-z'`
            echo "      ${new_fname}"
            new_fname=`echo ${new_fname} | tr '-' '_'`
            echo "      ${new_fname}"
            if [ ${fname} != ${new_fname} ]
            then
              echo "      ${fname} --> ${new_fname}"
              git "mv" "${fname}" ${new_fname}
            fi
          done
          git commit -am "formatting filenames $GITHUB_SHA" ||  true
      - name: Clang Formatter
        run: |
          for fname in $(find . -name '*.c' -o -name '*.h')
          do 
            clang-format --verbose -i --style="$line1 $line2 $line3 $line4" "$fname"
          done
          git commit -am "formatting source-code for $GITHUB_SHA" ||  true
        env:
          line1: "{ BasedOnStyle: Google, UseTab: Never,"
          line2: "IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman,"
          line3: "AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false,"
          line4: "ColumnLimit: 80, AccessModifierOffset: -4 }"
      - name: Git Push
        run: git push --force origin HEAD:$GITHUB_REF || true

      - name: Update DIRECTORY.md
        shell: python
        run: |
            import os
            from typing import Iterator

            URL_BASE = "https://github.com/TheAlgorithms/C/blob/master"
            g_output = []

            def good_filepaths(top_dir: str = ".") -> Iterator[str]:
                cpp_exts = tuple(".c .c++ .cc .cpp .cu .cuh .cxx .h .h++ .hh .hpp .hxx".split())
                for dirpath, dirnames, filenames in os.walk(top_dir):
                    dirnames[:] = [d for d in dirnames if d[0] not in "._"]
                    for filename in filenames:
                        if os.path.splitext(filename)[1].lower() in cpp_exts:
                            yield os.path.join(dirpath, filename).lstrip("./")

            def md_prefix(i):
                return f"{i * '  '}*" if i else "\n##"

            def print_path(old_path: str, new_path: str) -> str:
                global g_output
                old_parts = old_path.split(os.sep)
                for i, new_part in enumerate(new_path.split(os.sep)):
                    if i + 1 > len(old_parts) or old_parts[i] != new_part:
                        if new_part:
                            g_output.append(f"{md_prefix(i)} {new_part.replace('_', ' ').title()}")
                return new_path

            def build_directory_md(top_dir: str = ".") -> str:
                global g_output
                old_path = ""
                for filepath in sorted(good_filepaths(), key=str.lower):
                    filepath, filename = os.path.split(filepath)
                    if filepath != old_path:
                        old_path = print_path(old_path, filepath)
                    indent = (filepath.count(os.sep) + 1) if filepath else 0
                    url = "/".join((URL_BASE, filepath, filename)).replace(" ", "%20")
                    filename = os.path.splitext(filename.replace("_", " ").title())[0]
                    g_output.append(f"{md_prefix(indent)} [{filename}]({url})")
                return "# List of all files\n" + "\n".join(g_output)

            with open("DIRECTORY.md", "w") as out_file:
                out_file.write(build_directory_md(".") + "\n")
      - name: Update DIRECTORY.md
        run: |
          cat DIRECTORY.md
          git config --global user.name github-actions
          git config --global user.email '${GITHUB_ACTOR}@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY
          git add DIRECTORY.md
          git commit -am "updating DIRECTORY.md" ||  true
          git push --force origin HEAD:$GITHUB_REF || true

  build:
    name: Compile checks
    runs-on: ${{ matrix.os }}
    needs: [MainSequence]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
    steps:
      - uses: actions/checkout@master
        with:
          submodules: true
      - run: cmake -B ./build -S .
      - run: cmake --build build
